{
  "name": "express-jwt",
  "version": "0.3.2",
  "description": "JWT authentication middleware.",
  "keywords": [
    "auth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "http",
    "jwt",
    "token",
    "oauth",
    "express"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/auth0/express-jwt.git"
  },
  "bugs": {
    "url": "http://github.com/auth0/express-jwt/issues"
  },
  "author": {
    "name": "Matias Woloski",
    "email": "matias@auth0.com",
    "url": "https://www.auth0.com/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "express-unless": "0.0.0",
    "jsonwebtoken": "~1.1.1"
  },
  "devDependencies": {
    "mocha": "1.x.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "readme": "# express-jwt\n\n[![Build](https://travis-ci.org/auth0/express-jwt.png)](http://travis-ci.org/auth0/express-jwt)\n\nMiddleware that validates JsonWebTokens and set `req.user`.\n\nThis module lets you authenticate HTTP requests using JWT tokens, in your Node.js\napplications.  JWT tokens are typically used protect API endpoints, and are\noften issued using OpenID Connect.\n\n## Install\n\n    $ npm install express-jwt\n\n## Usage\n\nThe JWT authentication middleware authenticates callers using a JWT\ntoken.  If the token is valid, `req.user` will be set with the JSON object decoded to be used by later middleware for authorization and access control.\n\nFor example,\n\n```javascript\nvar jwt = require('express-jwt');\n\napp.get('/protected',\n  jwt({secret: 'shhhhhhared-secret'}),\n  function(req, res) {\n    if (!req.user.admin) return res.send(401);\n    res.send(200);\n  });\n```\n\nYou can specify audience and/or issuer as well:\n\n```javascript\njwt({ secret: 'shhhhhhared-secret',\n  audience: 'http://myapi/protected',\n  issuer: 'http://issuer' })\n```\n\n> If the JWT has an expiration (`exp`), it will be checked.\n\nOptionally you can make some paths unprotected as follows:\n\n```javascript\napp.use(jwt({ secret: 'shhhhhhared-secret'}).unless({path: ['/token']}));\n```\n\nThis is especially useful when applying to multiple routes.\n\nThis module also support tokens signed with public/private key pairs. Instead of a secret, you can specify a Buffer with the public key\n\n```javascript\nvar publicKey = fs.readFileSync('/pat/to/public.pub');\njwt({ secret: publicKey });\n```\n\n\n### Error handling\n\nThe default behavior is to throw an error when the token is invalid, so you can add your custom logic to manage unauthorized access as follows:\n\n\n```javascript\napp.use(function (err, req, res, next) {\n  if (err.name === 'UnauthorizedError') { \n    res.send(401, 'invalid token...');\n  }\n});\n```\n\n## Related Modules\n\n- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) â€” JSON Web Token sign and verification\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Matias Woloski](http://github.com/woloski)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2013 Auth0 <[http://auth0.com](http://auth0.com)>\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/auth0/express-jwt",
  "_id": "express-jwt@0.3.2",
  "dist": {
    "shasum": "94abd52da128e58cf018382abf6c0cceefc7dd6f"
  },
  "_from": "express-jwt@",
  "_resolved": "https://registry.npmjs.org/express-jwt/-/express-jwt-0.3.2.tgz"
}
